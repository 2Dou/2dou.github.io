<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Life on Orz the way</title>
    <link>https://www.orztu.com/categories/coding-life/</link>
    <description>Recent content in Coding Life on Orz the way</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 16 Nov 2018 11:38:00 +0800</lastBuildDate>
    
	<atom:link href="https://www.orztu.com/categories/coding-life/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用元表优化 Lua 配置文件 II</title>
      <link>https://www.orztu.com/post/lua-table-minify-ii/</link>
      <pubDate>Fri, 16 Nov 2018 11:38:00 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/lua-table-minify-ii/</guid>
      <description>&lt;p&gt;上回提到&lt;a href=&#34;https://www.orztu.com/post/lua-table-minify/&#34; target=&#34;_blank&#34;&gt;元表优化 Lua 配置文件&lt;/a&gt;，以减少重复字段，节省内存开销。&lt;/p&gt;

&lt;p&gt;除了这种直接地减少内存开销的方法，使用元表还能实现数据的延迟加载，从另一个角度节约内存。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用元表优化 Lua 配置文件</title>
      <link>https://www.orztu.com/post/lua-table-minify/</link>
      <pubDate>Tue, 06 Nov 2018 15:14:38 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/lua-table-minify/</guid>
      <description>&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;

&lt;p&gt;在游戏工程中，通常有大量配置是由策划提供，再转换成程序方便读取的格式添加到工程中。&lt;/p&gt;

&lt;p&gt;在我参与的&lt;code&gt;Cocos2dx-Lua&lt;/code&gt;工程中，策划通常在&lt;code&gt;Excel&lt;/code&gt;中配置，再通过脚本转换为&lt;code&gt;Lua-Table&lt;/code&gt;的文件。&lt;/p&gt;

&lt;p&gt;比如常见的道具表转换后：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CGO —— Golang 与 C 语言混合编程</title>
      <link>https://www.orztu.com/post/cgo-introduce/</link>
      <pubDate>Mon, 03 Sep 2018 15:56:08 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/cgo-introduce/</guid>
      <description>&lt;p&gt;在此使用一段简单的代码展示 CGO 的基本用法 —— 在 Go 程序中使用 C 语言编程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>govendor 使用</title>
      <link>https://www.orztu.com/post/using-govendor/</link>
      <pubDate>Thu, 02 Aug 2018 14:43:33 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/using-govendor/</guid>
      <description>&lt;h2 id=&#34;govendor&#34;&gt;govendor&lt;/h2&gt;

&lt;p&gt;go vendor 是 go 1.6 官方正式引入的包管理方式。&lt;/p&gt;

&lt;p&gt;其基本思路是，将引用的外部包的源代码放在当前工程的&lt;code&gt;vendor&lt;/code&gt;目录下面，go 编译时会优先从&lt;code&gt;vendor&lt;/code&gt;目录寻找依赖关系。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Slice and Array</title>
      <link>https://www.orztu.com/post/golang-slice-and-array/</link>
      <pubDate>Mon, 25 Jun 2018 15:22:42 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/golang-slice-and-array/</guid>
      <description>&lt;h2 id=&#34;数组与切片&#34;&gt;数组与切片&lt;/h2&gt;

&lt;p&gt;以前粗学时并没有留意 Golang 的数组，一直以为只有切片。&lt;/p&gt;

&lt;p&gt;今天看&lt;a href=&#34;https://book.douban.com/subject/27015617/&#34; target=&#34;_blank&#34;&gt;《Go语言实践》&lt;/a&gt;时才发现 Golang 也有数组。与切片的区别是定义时指定长度（例如长度为4的 int 型数组&lt;code&gt;var array [4]int&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;数组赋值时会拷贝整个数组，所以作为参数传递时也会完整拷贝，要考虑性能合理使用，必要时可以使用指针。&lt;/p&gt;

&lt;p&gt;以下代码便于理解数组和切片：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python为图片添加文字水印</title>
      <link>https://www.orztu.com/post/text-watermark/</link>
      <pubDate>Thu, 10 May 2018 10:54:06 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/text-watermark/</guid>
      <description>&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;

&lt;p&gt;使用知名python图片处理库PIL，为图片添加文字水印。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python实现微信跳一跳外挂</title>
      <link>https://www.orztu.com/post/wechat-jump/</link>
      <pubDate>Mon, 08 Jan 2018 10:00:41 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/wechat-jump/</guid>
      <description>&lt;p&gt;使用python+adb实现微信跳一跳外挂&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>