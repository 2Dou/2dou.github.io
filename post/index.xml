<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Orz the way</title>
    <link>https://www.orztu.com/post/</link>
    <description>Recent content in Posts on Orz the way</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 16 Nov 2021 09:56:23 +0800</lastBuildDate>
    
	<atom:link href="https://www.orztu.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fucking-Egg</title>
      <link>https://www.orztu.com/post/fucking-egg-society/</link>
      <pubDate>Tue, 16 Nov 2021 09:56:23 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/fucking-egg-society/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Git is very slow in WSL</title>
      <link>https://www.orztu.com/post/wsl-command/</link>
      <pubDate>Fri, 25 Dec 2020 10:37:10 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/wsl-command/</guid>
      <description>Git 最近切换到 Windows 工作，使用 WSL 作为命令行方案。但在 WSL 里面安装 git 后，在工程里面执行命令时，总感觉非常缓慢。 执行一下 git status 都要卡好一会儿。
经过一番搜索，原因大概是 Windows 的路径索引到 WSL 之间有一个转换导致的？具体没有细看。
但找到一个解决方案：
 先在 Windows 中安装 Git，然后在 WSL 里面用 git.exe 替代 Linux 版本的 git。
 因为我使用的oh-my-zsh，所以通过在.zshrc中定义git函数针对 WSL 路径和 Windows 路径区别处理（这个代码是抄的）：
function git() { if $(pwd -P | grep -q &amp;#34;^\/mnt\/.\/*&amp;#34;); then git.exe &amp;#34;$@&amp;#34; else command git &amp;#34;$@&amp;#34; fi } 但这样做需要注意两个环境的.gitconfig不是共用的。 可以配置includeIf，通过匹配 gitdir， 在 WSL 里面引用 Windows 的 .gitconfig；又在 Windows 里面引用 WSL 的 .</description>
    </item>
    
    <item>
      <title>ffmpeg 命令行</title>
      <link>https://www.orztu.com/post/ffmpeg-commands/</link>
      <pubDate>Sat, 15 Jun 2019 14:45:05 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/ffmpeg-commands/</guid>
      <description>&lt;p&gt;首先，并非专业视频处理人员；以下命令都是我从网上搜索后修改以为己所用。&lt;/p&gt;
&lt;h2 id=&#34;图片转视频&#34;&gt;图片转视频&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# gif 转视频（DURATION：时长，gif会循环播放）
ffmpeg -ignore_loop 0 -t DURATION -f gif -i &amp;quot;INPUT.gif&amp;quot; -vcodec libx264 -crf 5 &amp;quot;OUTPUT.mp4&amp;quot;

# png、jpg 转视频
ffmpeg -loop 1 -framerate 30 -f image2 -t DURATION -i &amp;quot;INPUT.jpg&amp;quot; -vcodec libx264 -crf 5 &amp;quot;OUTPUT.mp4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>记一次 Cocos2dx-Lua 闪退</title>
      <link>https://www.orztu.com/post/little-problem-while-using-cocos2dx-lua/</link>
      <pubDate>Sat, 22 Dec 2018 09:22:48 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/little-problem-while-using-cocos2dx-lua/</guid>
      <description>&lt;h2 id=&#34;闪退点&#34;&gt;闪退点&lt;/h2&gt;
&lt;p&gt;Version: Cocos2dx-Lua 3.16&lt;/p&gt;
&lt;p&gt;在某个页面修改后，出现闪退。查看修改记录没有特别的地方，均为修改图片或者条件判断。&lt;/p&gt;
&lt;p&gt;启动 XCode 发现闪退位置出现在&lt;code&gt;void Node::onEnterTransitionDidFinish()&lt;/code&gt;中，
在其调用子节点的&lt;code&gt;child-&amp;gt;onEnterTransitionDidFinish()&lt;/code&gt;时，&lt;code&gt;child&lt;/code&gt;指针无效。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Golang 中打印调用栈信息</title>
      <link>https://www.orztu.com/post/golang-trace/</link>
      <pubDate>Wed, 12 Dec 2018 15:38:49 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/golang-trace/</guid>
      <description>&lt;p&gt;在日志信息中，有时需要获取当前函数的调用信息，比如打印调用栈：&lt;/p&gt;
&lt;h2 id=&#34;调用栈&#34;&gt;调用栈&lt;/h2&gt;
&lt;h3 id=&#34;debugstack-byte&#34;&gt;debug.Stack() []byte&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;debug.Stack()&lt;/code&gt;函数可以获取当前 goroutine 的调用栈信息，需要&lt;code&gt;import &amp;quot;runtime/debug&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;--- BEGIN ---&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;--- END ---&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;boom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;boom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>使用元表优化 Lua 配置文件 II</title>
      <link>https://www.orztu.com/post/lua-table-minify-ii/</link>
      <pubDate>Fri, 16 Nov 2018 11:38:00 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/lua-table-minify-ii/</guid>
      <description>&lt;p&gt;上回提到&lt;a href=&#34;https://www.orztu.com/post/lua-table-minify/&#34;&gt;元表优化 Lua 配置文件&lt;/a&gt;，以减少重复字段，节省内存开销。&lt;/p&gt;
&lt;p&gt;除了这种直接地减少内存开销的方法，使用元表还能实现数据的延迟加载，从另一个角度节约内存。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用元表优化 Lua 配置文件</title>
      <link>https://www.orztu.com/post/lua-table-minify/</link>
      <pubDate>Tue, 06 Nov 2018 15:14:38 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/lua-table-minify/</guid>
      <description>&lt;h2 id=&#34;配置文件&#34;&gt;配置文件&lt;/h2&gt;
&lt;p&gt;在游戏工程中，通常有大量配置是由策划提供，再转换成程序方便读取的格式添加到工程中。&lt;/p&gt;
&lt;p&gt;在我参与的&lt;code&gt;Cocos2dx-Lua&lt;/code&gt;工程中，策划通常在&lt;code&gt;Excel&lt;/code&gt;中配置，再通过脚本转换为&lt;code&gt;Lua-Table&lt;/code&gt;的文件。&lt;/p&gt;
&lt;p&gt;比如常见的道具表转换后：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CGO —— Golang 与 C 语言混合编程</title>
      <link>https://www.orztu.com/post/cgo-introduce/</link>
      <pubDate>Mon, 03 Sep 2018 15:56:08 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/cgo-introduce/</guid>
      <description>&lt;p&gt;C 语言与 Golang 相互调用的简单例子。&lt;/p&gt;
&lt;p&gt;在此使用一段简单的代码展示 CGO 的基本用法 —— 在 Go 程序中使用 C 语言编程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>govendor 使用</title>
      <link>https://www.orztu.com/post/using-govendor/</link>
      <pubDate>Thu, 02 Aug 2018 14:43:33 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/using-govendor/</guid>
      <description>&lt;h2 id=&#34;govendor&#34;&gt;govendor&lt;/h2&gt;
&lt;p&gt;go vendor 是 go 1.6 官方正式引入的包管理方式。&lt;/p&gt;
&lt;p&gt;其基本思路是，将引用的外部包的源代码放在当前工程的&lt;code&gt;vendor&lt;/code&gt;目录下面，go 编译时会优先从&lt;code&gt;vendor&lt;/code&gt;目录寻找依赖关系。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go get through a proxy</title>
      <link>https://www.orztu.com/post/go-get-through-a-proxy/</link>
      <pubDate>Thu, 02 Aug 2018 09:47:52 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/go-get-through-a-proxy/</guid>
      <description>&lt;p&gt;由于众所不知的原因，在国内访问&lt;code&gt;golang.org&lt;/code&gt;需要爬梯子。&lt;/p&gt;
&lt;p&gt;所以使用&lt;code&gt;go get&lt;/code&gt;安装某些包的时候，也要用梯子。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Slice and Array</title>
      <link>https://www.orztu.com/post/golang-slice-and-array/</link>
      <pubDate>Mon, 25 Jun 2018 15:22:42 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/golang-slice-and-array/</guid>
      <description>&lt;h2 id=&#34;数组与切片&#34;&gt;数组与切片&lt;/h2&gt;
&lt;p&gt;以前粗学时并没有留意 Golang 的数组，一直以为只有切片。&lt;/p&gt;
&lt;p&gt;今天看&lt;a href=&#34;https://book.douban.com/subject/27015617/&#34;&gt;《Go 语言实践》&lt;/a&gt;时才发现 Golang 也有数组。与切片的区别是定义时指定长度（例如长度为 4 的 int 型数组&lt;code&gt;var array [4]int&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;数组赋值时会拷贝整个数组，所以作为参数传递时也会完整拷贝，要考虑性能合理使用，必要时可以使用指针。&lt;/p&gt;
&lt;p&gt;以下代码便于理解数组和切片：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python为图片添加文字水印</title>
      <link>https://www.orztu.com/post/text-watermark/</link>
      <pubDate>Thu, 10 May 2018 10:54:06 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/text-watermark/</guid>
      <description>&lt;h2 id=&#34;功能&#34;&gt;功能&lt;/h2&gt;
&lt;p&gt;使用知名python图片处理库PIL，为图片添加文字水印。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python实现微信跳一跳外挂</title>
      <link>https://www.orztu.com/post/wechat-jump/</link>
      <pubDate>Mon, 08 Jan 2018 10:00:41 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/wechat-jump/</guid>
      <description>&lt;p&gt;使用python+adb实现微信跳一跳外挂&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>迎春纳福享盛世，吉祥如意贺太平</title>
      <link>https://www.orztu.com/post/poors-in-peking/</link>
      <pubDate>Tue, 28 Nov 2017 09:14:03 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/poors-in-peking/</guid>
      <description></description>
    </item>
    
    <item>
      <title>树莓派 Raspbian系统安装与基本配置</title>
      <link>https://www.orztu.com/post/raspbian-install-and-configure/</link>
      <pubDate>Wed, 18 Oct 2017 16:44:36 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/raspbian-install-and-configure/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;系统安装httpswwwraspberrypiorgdocumentationinstallationinstalling-imagesreadmemd&#34;&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&#34;&gt;系统安装&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;系统: &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;raspbian&lt;/a&gt; &lt;!-- raw HTML omitted --&gt;
工具（二选一）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://etcher.io/&#34;&gt;Etcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/win32diskimager/&#34;&gt;Win32DiskImager&lt;/a&gt;（windows only）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;将SD卡格式化成exFat格式&lt;/li&gt;
&lt;li&gt;使用Etcher或者Win32DiskImager将下载的raspbian系统镜像(img文件)写入SD卡&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;写入完成之后就相当于系统安装完成了。这时候SD卡被分成两个区，有一个区是在windows下无法识别，不用理会。&lt;/p&gt;
&lt;p&gt;这时候如果直接将SD卡插入树莓派，会发现“无法启动”。显示屏没信号，在路由器里找到树莓派的IP也无法用ssh登录。&lt;/p&gt;
&lt;p&gt;我安装的时候就是踩到这个坑。以为安装失败，反复装了好几次，就差把SD卡写穿了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自动点击 - 申请Google Voice号码</title>
      <link>https://www.orztu.com/post/gvoice-number/</link>
      <pubDate>Wed, 09 Aug 2017 08:44:10 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/gvoice-number/</guid>
      <description>&lt;p&gt;最近V2上很多卖GV号码的，心想这玩意也能值钱。所以想着自己试试动手申请一个。&lt;/p&gt;
&lt;p&gt;首先参照这篇“&lt;a href=&#34;https://kn007.net/topics/free-application-for-google-voice-phone-number/&#34;&gt;免费申请Google Voice美国电话号码&lt;/a&gt;”申请号码。&lt;/p&gt;
&lt;p&gt;到了这一步：提示“There was an error with your request. Please try again.”
&lt;img src=&#34;https://www.orztu.com/images/post/gv-0.jpg&#34; alt=&#34;palindromic&#34; title=&#34;错误&#34;&gt;&lt;/p&gt;
&lt;p&gt;听说在这里反复提交直到申请成功即可。找了网上的自动提交方法（复制出来CURL提交），发现不好使，curl一直没响应。
但是网页上确实可以反复点击提交的。于是改用自动点击的方式，一夜醒来发现已经申请成功。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>天龙八部</title>
      <link>https://www.orztu.com/post/tianlongbabu/</link>
      <pubDate>Wed, 31 May 2017 17:54:35 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/tianlongbabu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.orztu.com/post/hello-world/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.orztu.com/post/hello-world/</guid>
      <description>国际惯例</description>
    </item>
    
  </channel>
</rss>