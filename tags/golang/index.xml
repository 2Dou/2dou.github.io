<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Orz the way</title>
    <link>https://www.orztu.com/tags/golang/</link>
    <description>Recent content in Golang on Orz the way</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 12 Dec 2018 15:38:49 +0800</lastBuildDate>
    
	<atom:link href="https://www.orztu.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在 Golang 中打印调用栈信息</title>
      <link>https://www.orztu.com/post/golang-trace/</link>
      <pubDate>Wed, 12 Dec 2018 15:38:49 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/golang-trace/</guid>
      <description>&lt;p&gt;在日志信息中，有时需要获取当前函数的调用信息，比如打印调用栈：&lt;/p&gt;

&lt;h2 id=&#34;调用栈&#34;&gt;调用栈&lt;/h2&gt;

&lt;h3 id=&#34;debug-stack-byte&#34;&gt;debug.Stack() []byte&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;debug.Stack()&lt;/code&gt;函数可以获取当前 goroutine 的调用栈信息，需要&lt;code&gt;import &amp;quot;runtime/debug&amp;quot;&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;--- BEGIN ---&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;--- END ---&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;boom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;boom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CGO —— Golang 与 C 语言混合编程</title>
      <link>https://www.orztu.com/post/cgo-introduce/</link>
      <pubDate>Mon, 03 Sep 2018 15:56:08 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/cgo-introduce/</guid>
      <description>&lt;p&gt;C 语言与 Golang 相互调用的简单例子。&lt;/p&gt;

&lt;p&gt;在此使用一段简单的代码展示 CGO 的基本用法 —— 在 Go 程序中使用 C 语言编程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>govendor 使用</title>
      <link>https://www.orztu.com/post/using-govendor/</link>
      <pubDate>Thu, 02 Aug 2018 14:43:33 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/using-govendor/</guid>
      <description>&lt;h2 id=&#34;govendor&#34;&gt;govendor&lt;/h2&gt;

&lt;p&gt;go vendor 是 go 1.6 官方正式引入的包管理方式。&lt;/p&gt;

&lt;p&gt;其基本思路是，将引用的外部包的源代码放在当前工程的&lt;code&gt;vendor&lt;/code&gt;目录下面，go 编译时会优先从&lt;code&gt;vendor&lt;/code&gt;目录寻找依赖关系。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go get through a proxy</title>
      <link>https://www.orztu.com/post/go-get-through-a-proxy/</link>
      <pubDate>Thu, 02 Aug 2018 09:47:52 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/go-get-through-a-proxy/</guid>
      <description>&lt;p&gt;由于众所不知的原因，在国内访问&lt;code&gt;golang.org&lt;/code&gt;需要爬梯子。&lt;/p&gt;

&lt;p&gt;所以使用&lt;code&gt;go get&lt;/code&gt;安装某些包的时候，也要用梯子。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang Slice and Array</title>
      <link>https://www.orztu.com/post/golang-slice-and-array/</link>
      <pubDate>Mon, 25 Jun 2018 15:22:42 +0800</pubDate>
      
      <guid>https://www.orztu.com/post/golang-slice-and-array/</guid>
      <description>&lt;h2 id=&#34;数组与切片&#34;&gt;数组与切片&lt;/h2&gt;

&lt;p&gt;以前粗学时并没有留意 Golang 的数组，一直以为只有切片。&lt;/p&gt;

&lt;p&gt;今天看&lt;a href=&#34;https://book.douban.com/subject/27015617/&#34; target=&#34;_blank&#34;&gt;《Go语言实践》&lt;/a&gt;时才发现 Golang 也有数组。与切片的区别是定义时指定长度（例如长度为4的 int 型数组&lt;code&gt;var array [4]int&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;数组赋值时会拷贝整个数组，所以作为参数传递时也会完整拷贝，要考虑性能合理使用，必要时可以使用指针。&lt;/p&gt;

&lt;p&gt;以下代码便于理解数组和切片：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>